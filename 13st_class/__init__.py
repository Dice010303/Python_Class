# OOP (객체 지향 프로그래밍)
#
# - 객체를 기준으로 나누어 코드를 구현 (자바의 경우 클래스)
#     - (클래스는 설계도 직접일을 하는 구현체는 인스턴스이다.)
#
# 1. OOP는 객체의 관점에서 프로그래밍 하는 것을 의미
# 2. c언어는 절차 지향 프로그래밍인데 , 절차 지향 프로그래밍은 프로세스가 함수 단위로 순서대로 진행되는 것을 말한다.
# 3. OOP는 절차지향에 비해서 사람의 사고방식과 더 가깝다
# 4. OOP는 객체들의 유기적인 관계를 통해서 프로세스가 진행된다.
# 5. 애플리케이션을 구성하는 요소들을 객체로 바라보고 , 객체를 유기적으로 연결하여 프로그래밍하는 것을 말한다.
#
# OOP의 특징
# [캡슐화]
# - 하나의 객체에 대해 그 객체가 특정한 목적을 위한 필요한 변수나 메소드를 하나로 묶는 것을 의미한다.
#     - 클래스를 만들 때 훗날 이 클래스에서 만들어진 객체가 특정한 목적을 잘 수행할 수 있도록 사용해야할 변수와
#       그 변수를 가지고 특정한 액션 즉 메서드를 관련성있게 클래스에 구성해야한다.
#
# [정보은닉] - 캡슐화를 하는 목적
# [추상화] - 목적과 관련이 없는 부분을 제거하여 필요한 부분만을 표현하기 위한 개념
#         - 여러 속성 중에서 필요한 요소만 추린 것
# [다형성]
# - 상속(overriding)을 통해 기능을 확장하거나 변경하는 것을 가능하게 해준다.(형태가 같은데 다른 기능)
# - 장점 : 같은 이름의 속성을 유지함으로서, 속성을 사용하기 위한 인터페이스를 유지하고, 메서드 이름을 낭비하지 않는다.
#
# [상속성,재사용]
# - 상속 : 기존 상위클래스에 근거하여 새롭게 클래스와 행위를 정의할 수 있게 도와주는 개념
# - 기존 클래스에 기능을 가져와 재사용할 수 있으면서도 동시에 새롭게 만든 클래스에 새로운 기능을 추가할 수 있게 만들어 준다.
# - 상속의 필요성 : 코드의 중복을 없애기 위함 --> 코드의 중복이 많아지면 개발단계와 유지보수에서 어려워진다.
